@using Ignyte.BlazorMessenger.DataLayer.Models
@using Microsoft.AspNetCore.Components

<div class="chat-room-container ">
    <div class="chat-room-header">
        <h3>@chatRoom?.Name</h3>
        <p>Members: @chatRoom?.MemberIds.Count()</p>
    </div>

    <div class="chat-messages-container">
        @if (chatRoom?.Messages != null && chatRoom.Messages.Any())
        {
            @foreach (var message in chatRoom.Messages.OrderBy(m => m.DateTimeSent))
            {
                string alignmentClass = message.UserId == currentUser?.Id ? "message-wrapper message-wrapper-own" : "message-wrapper message-wrapper-other";
                <div class="@alignmentClass">
                    <ChatMessage message="@message"
                                 OnMessageDeletedCallback="HandleMessageDeleted" />
                </div>
            }
        }
        else
        {
            <p>No messages yet.</p>
        }
    </div>
    <div class="chat-input-container">
        <ChatInput OnSend="HandleSendMessage" />
    </div>
</div>

<button @onclick="TestClick">Click</button>
<p>@ClickMessage</p>

@code {
    private string ClickMessage = "Not clicked yet";

    private void TestClick()
    {
        ClickMessage = $"Clicked at {DateTime.Now}";
    }
    [Parameter] public ChatRoom? chatRoom { get; set; }
    [Parameter] public User? currentUser { get; set; }

    [Parameter] public EventCallback<Message> OnMessageSent { get; set; }
    [Parameter] public EventCallback<Message> OnMessageDeleted { get; set; }

    private async Task HandleSendMessage(Message message)
    {
        // Initialize missing properties for the new message
        message.Id = Guid.NewGuid().ToString();
        message.UserId = currentUser?.Id ?? string.Empty;
        message.DisplayName = currentUser?.DisplayName ?? string.Empty;
        message.ChatRoomId = chatRoom?.Id ?? string.Empty;
        message.ProfilePicture = currentUser?.ProfilePicture ?? string.Empty;

        if (!message.IsScheduled)
        {
            message.DateTimeSent = DateTime.UtcNow;
            message.WasSent = true;
        }

        chatRoom?.Messages.Add(message);
        await OnMessageSent.InvokeAsync(message);
        StateHasChanged();
    }

    private async Task HandleMessageDeleted(Message message)
    {
        Console.WriteLine("hey delete");
        if (chatRoom?.Messages.Remove(message) == true)
        {
            Console.WriteLine("working..");
            await OnMessageDeleted.InvokeAsync(message);
            StateHasChanged();
        }
    }
}